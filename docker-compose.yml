services:
  traefik:
    image: traefik:v3.0
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "8090:8090"
      - "8081:8081"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml

  server:
    image: ghcr.io/aet-devops25/ticketing-service/server:latest
    build:
      context: ./server
      dockerfile: Dockerfile
      cache_from:
        - ghcr.io/aet-devops25/ticketing-service/server:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/db
      - SPRING_DATASOURCE_USERNAME=spoved
      - SPRING_DATASOURCE_PASSWORD=secret
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.server-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.server.rule=PathPrefix(`/api/v1`)"
      - "traefik.http.routers.server.entrypoints=web"
      - "traefik.http.routers.server.service=server-svc"
      - "traefik.http.routers.server.priority=100"
    depends_on:
      - database
      - auth
    expose:
      - 8080
    restart: unless-stopped

  client:
    image: ghcr.io/aet-devops25/client-service/client:latest
    build:
      context: ./client/frontend
      dockerfile: Dockerfile
      args:
        VITE_SERVER_API_URL: ${VITE_SERVER_API_URL:-http://localhost:8090/api/v1}
        VITE_AUTH_API_URL: ${VITE_AUTH_API_URL:-http://localhost:8090}
        VITE_GENAI_API_URL: ${VITE_GENAI_API_URL:-http://localhost:8000}
    environment:
      - VITE_SERVER_API_URL=${VITE_SERVER_API_URL:-http://localhost:8090/api/v1}
      - VITE_AUTH_API_URL=${VITE_AUTH_API_URL:-http://localhost:8090}
      - VITE_GENAI_API_URL=${VITE_GENAI_API_URL:-http://localhost:8000}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=PathPrefix(`/`) && !PathPrefix(`/api`) && !PathPrefix(`/auth`)"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.routers.client.service=client-svc"
      - "traefik.http.routers.client.priority=100"
      - "traefik.http.services.client-svc.loadbalancer.server.port=3000"
    depends_on:
      - server
      - traefik
      - auth
    expose:
      - 3000
    restart: unless-stopped

  database:
    image: team-spoved-db
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=spoved
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=db
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  auth:
    image: auth-service
    build:
      context: ./auth
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/db
      - SPRING_DATASOURCE_USERNAME=spoved
      - SPRING_DATASOURCE_PASSWORD=secret
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.auth-svc.loadbalancer.server.port=8030"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.entrypoints=web"
      - "traefik.http.routers.auth.service=auth-svc"
      - "traefik.http.routers.auth.priority=100"
    depends_on:
      - database
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    user: root
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsInExplore
      - GF_LOG_CONSOLECOLORS=true
    entrypoint: ["sh", "-c", "/etc/grafana/provisioning/init_grafana.sh"]
    depends_on:
      - prometheus
    restart: unless-stopped

  genai:
    image: genai-service
    build:
      context: ./genai
      dockerfile: Dockerfile
      args:
        - BACKEND_API_URL=http://server:8080/api/v1
        - GEMINI_API_KEY=${GEMINI_API_KEY}
    environment:
      - BACKEND_API_URL=http://server:8080/api/v1
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      - server
      - traefik
    ports:
      - "8000:8000"
    expose:
      - 8000
    restart: unless-stopped

volumes:
  pgdata:
  prometheus_data:
  grafana-storage: