openapi: 3.0.3
info:
  title: Spoved App 
  version: 1.0.0
  description: OpenAPI spec for all the microservices exposing endpoints. Schemas are also included.
  servers: 
  - url: 'https://team-spoved.student.k8s.aet.cit.tum.de'

paths:
  # --- Auth Service Paths ---
  /auth/register:
    post:
      summary: Register a new user
      description: Registers a new user with a username, password, and role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: string
        '400':
          description: User already exists or invalid input
  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token if successful.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized (invalid credentials)

  # --- Media Service Paths ---
  /media/{mediaId}:
    get:
      summary: Get media analysis data
      description: Retrieve analysis data for a specific media item by ID.
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Media analysis data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
        '404':
          description: Media not found
  /media/{mediaId}/analyzed:
    put:
      summary: Update analyzed status
      description: Mark a media item as analyzed or not.
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                analyzed:
                  type: boolean
      responses:
        '200':
          description: Analyzed status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
        '404':
          description: Media not found
  /media/{mediaId}/result:
    put:
      summary: Update analysis result
      description: Update the AI-generated result for a media item.
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: string
      responses:
        '200':
          description: Analysis result updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
        '404':
          description: Media not found
  /media/{mediaId}/reason:
    put:
      summary: Update analysis reason
      description: Update the reason for the analysis result of a media item.
      parameters:
        - in: path
          name: mediaId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Analysis reason updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
        '404':
          description: Media not found

  # --- Ticket Service Paths ---
  /tickets:
    get:
      summary: Get filtered tickets
      description: Retrieve tickets filtered by assignedToId, createdById, status, dueDate, location, or mediaType.
      parameters:
        - in: query
          name: assignedToId
          schema:
            type: integer
        - in: query
          name: createdById
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            enum: [OPEN, IN_PROGRESS, FINISHED]
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
        - in: query
          name: location
          schema:
            type: string
        - in: query
          name: mediaType
          schema:
            type: string
            enum: [PHOTO, VIDEO, AUDIO]
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      summary: Create a new ticket
      description: Create a new service ticket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '200':
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
  /tickets/{ticketId}:
    get:
      summary: Get ticket by ID
      description: Retrieve a ticket by its unique ID.
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Ticket not found
    put:
      summary: Update ticket status
      description: Update the status of a ticket.
      parameters:
        - in: path
          name: ticketId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [OPEN, IN_PROGRESS, FINISHED]
      responses:
        '200':
          description: Ticket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid input
        '404':
          description: Ticket not found

  # --- User Service Paths ---
  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a user by their unique ID.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users:
    get:
      summary: Get filtered users
      description: Retrieve users filtered by ID, role, or name.
      parameters:
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: role
          schema:
            type: string
            enum: [SUPERVISOR, WORKER]
        - in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  # --- GenAI Service Paths ---
  /voice/speech-to-text:
    post:
      summary: Convert speech audio to text
      description: Converts uploaded audio (WAV or WebM) to text using Google Cloud Speech-to-Text.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file to transcribe (WAV or WebM)
      responses:
        '200':
          description: Successful transcription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechToTextResponse'
        '400':
          description: Invalid audio or no speech detected
        '500':
          description: Internal server error
  /voice/query-ai:
    post:
      summary: Query Gemini AI for conversational response
      description: Generates a conversational response based on user input and conversation history.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryAIRequest'
      responses:
        '200':
          description: AI response generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAIResponse'
        '500':
          description: Internal server error
  voice/text-to-speech:
    post:
      summary: Convert text to speech
      description: Converts input text to speech audio using Google Cloud Text-to-Speech.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextToSpeechRequest'
      responses:
        '200':
          description: Audio file generated
          content:
            audio/wav:
              schema:
                type: string
                format: binary
        '500':
          description: Internal server error
  /media:
    get:
      summary: Get all media items
      description: Retrieve all media items.
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of media items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaAnalysis'
  /media/{media_id}:
    get:
      summary: Get media by ID
      description: Retrieve a media item by its ID.
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Media item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
  /video-photo/{media_id}:
    get:
      summary: Get video/photo analysis data
      description: Retrieve analysis data for a specific video/photo media item by ID.
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Video/photo analysis data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
  /video-photo/{media_id}/analyzed:
    put:
      summary: Update analyzed status
      description: Mark a video/photo media item as analyzed or not.
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                analyzed:
                  type: boolean
      responses:
        '200':
          description: Analyzed status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
  /video-photo/{media_id}/result:
    put:
      summary: Update analysis result
      description: Update the AI-generated result for a video/photo media item.
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: string
      responses:
        '200':
          description: Analysis result updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
  /video-photo/{media_id}/reason:
    put:
      summary: Update analysis reason
      description: Update the reason for the analysis result of a video/photo media item.
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Analysis reason updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaAnalysis'
  /tickets:
    get:
      summary: Get all tickets
      description: Retrieve all tickets.
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      summary: Create a new ticket
      description: Create a new ticket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /tickets/{ticket_id}:
    get:
      summary: Get ticket by ID
      description: Retrieve a ticket by its ID.
      parameters:
        - in: path
          name: ticket_id
          required: true
          schema:
            type: integer
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /automation/media-uploaded:
    post:
      summary: Handle media upload event
      description: Trigger automation workflow for uploaded media.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaUploadEvent'
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Workflow triggered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
  /automation/trigger-automation:
    post:
      summary: Main automation endpoint for ticket creation
      description: Triggers automation workflow when new media is uploaded (photo/video/audio).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaUploadEvent'
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Automation workflow started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
  /automation/webhook/media-uploaded:
    post:
      summary: Webhook for media upload event
      description: Webhook endpoint called by backend API to trigger ticket creation for new media uploads.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaUploadEvent'
      parameters:
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Automation workflow started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
  /gemini/auto-create-ticket:
    post:
      summary: Automatically create a ticket from media using Gemini AI analysis
      description: Main endpoint for automated ticket creation feature.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoTicketRequest'
      responses:
        '200':
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutoTicketResponse'
  /gemini/health:
    get:
      summary: Gemini health check
      description: Returns the health status of the Gemini service.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy

components:
  schemas:
    # --- Auth Schemas ---
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [SUPERVISOR, WORKER]
    LoginRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
    # --- Media Schemas ---
    MediaAnalysis:
      type: object
      properties:
        mediaId:
          type: integer
        analyzed:
          type: boolean
        result:
          type: string
        reason:
          type: string
        url:
          type: string
          description: URL to the media file
    # --- Ticket Schemas ---
    Ticket:
      type: object
      properties:
        ticketId:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, FINISHED]
        dueDate:
          type: string
          format: date
        location:
          type: string
        mediaType:
          type: string
          enum: [PHOTO, VIDEO, AUDIO]
        createdBy:
          type: integer
        assignedTo:
          type: integer
        mediaId:
          type: integer
    CreateTicketRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, FINISHED]
        dueDate:
          type: string
          format: date
        location:
          type: string
        mediaType:
          type: string
          enum: [PHOTO, VIDEO, AUDIO]
        createdBy:
          type: integer
        assignedTo:
          type: integer
        mediaId:
          type: integer
    # --- User Schemas ---
    User:
      type: object
      properties:
        userId:
    # --- GenAI Schemas --- 
    SpeechToTextResponse:
      type: object
      properties:
        transcript:
          type: string
          description: The transcribed text from the audio
    QueryAIRequest:
      type: object
      properties:
        prompt:
          type: string
          description: The user input prompt
        conversation_historic:
          type: string
          description: The conversation history so far
    QueryAIResponse:
      type: object
      properties:
        response:
          type: string
          description: The AI-generated response
        updatedHistory:
          type: string
          description: The updated conversation history
    TextToSpeechRequest:
      type: object
      properties:
        text:
          type: string
          description: The text to convert to speech
    MediaAnalysis:
      type: object
      properties:
        mediaId:
          type: integer
        analyzed:
          type: boolean
        result:
          type: string
        reason:
          type: string
        url:
          type: string
          description: URL to the media file
    Ticket:
      type: object
      properties:
        ticketId:
          type: integer
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, FINISHED]
        dueDate:
          type: string
          format: date
        location:
          type: string
        mediaType:
          type: string
          enum: [PHOTO, VIDEO, AUDIO]
        createdBy:
          type: integer
        assignedTo:
          type: integer
        mediaId:
          type: integer
    CreateTicketRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [OPEN, IN_PROGRESS, FINISHED]
        dueDate:
          type: string
          format: date
        location:
          type: string
        mediaType:
          type: string
          enum: [PHOTO, VIDEO, AUDIO]
        createdBy:
          type: integer
        assignedTo:
          type: integer
        mediaId:
          type: integer
    MediaUploadEvent:
      type: object
      properties:
        media_id:
          type: integer
        media_type:
          type: string
        uploaded_by:
          type: integer
    WorkflowResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        ticket_id:
          type: integer
    AutoTicketRequest:
      type: object
      properties:
        media_id:
          type: integer
        created_by:
          type: integer
        assigned_to:
          type: integer
    AutoTicketResponse:
      type: object
      properties:
        success:
          type: boolean
        ticket_id:
          type: integer
        message:
          type: string